#include <iostream>

inline int64_t alu(int64_t n) {
    int64_t data[14];

    for (int i = 13; i >= 0; i--) {
        data[i] = n % 10;
        if (data[i] == 0)
            return -1;
        n /= 10;
    }

    int64_t x = 0;
    int64_t y = 0;
    int64_t z = 0;
    int64_t w = 0;
    w = data[0];
    x = z;
    x %= 26;
    x += 14;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 7;
    y *= x;
    z += y;
    w = data[1];
    x = z;
    x %= 26;
    x += 12;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 4;
    y *= x;
    z += y;
    w = data[2];
    x = z;
    x %= 26;
    x += 11;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 8;
    y *= x;
    z += y;
    w = data[3];
    x = z;
    x %= 26;
    z /= 26;
    x += -4;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 1;
    y *= x;
    z += y;
    w = data[4];
    x = z;
    x %= 26;
    x += 10;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 5;
    y *= x;
    z += y;
    w = data[5];
    x = z;
    x %= 26;
    x += 10;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 14;
    y *= x;
    z += y;
    w = data[6];
    x = z;
    x %= 26;
    x += 15;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 12;
    y *= x;
    z += y;
    w = data[7];
    x = z;
    x %= 26;
    z /= 26;
    x += -9;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 10;
    y *= x;
    z += y;
    w = data[8];
    x = z;
    x %= 26;
    z /= 26;
    x += -9;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 5;
    y *= x;
    z += y;
    w = data[9];
    x = z;
    x %= 26;
    x += 12;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 7;
    y *= x;
    z += y;
    w = data[10];
    x = z;
    x %= 26;
    z /= 26;
    x += -15;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 6;
    y *= x;
    z += y;
    w = data[11];
    x = z;
    x %= 26;
    z /= 26;
    x += -7;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 8;
    y *= x;
    z += y;
    w = data[12];
    x = z;
    x %= 26;
    z /= 26;
    x += -10;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 4;
    y *= x;
    z += y;
    w = data[13];
    x = z;
    x %= 26;
    z /= 26;
    x = int64_t(x == w);
    x = int64_t(x == 0);
    y = 25;
    y *= x;
    y += 1;
    z *= y;
    y = w;
    y += 6;
    y *= x;
    z += y;
    return z;
}

    
int main() {
    #pragma omp parallel for schedule (static, 1000000000)
    for (int64_t n = 99999999999999LL; n > 9999999999999LL; --n) {
        if (alu(n) == 0) {
            std::cout << "ok " << n << std::endl;
        }
    }
}
